# vim:fileencoding=utf-8:fdm=marker

# Keymaps to remember
# <Ctrl>-<Cmd>-, - reload config

# Fonts {{{
# Font family. You can also specify different fonts for the
# bold/italic/bold-italic variants.
#
# You can get a list of full family names available on your computer by running
# kitty list-fonts
font_family      Fira Code Retina Nerd Font Complete Mono
italic_font      Operator Mono Book Italic Nerd Font Complete Mono
bold_font        Operator Mono Bold Nerd Font Complete
bold_italic_font Operator Mono Bold Italic Nerd Font Complete

# NOTE: Do not use odd values as these affect how kitty renders margin
font_size        12.5

# https://sw.kovidgoyal.net/kitty/conf.html?highlight=font%20features
# https://github.com/tonsky/FiraCode/wiki/How-to-enable-stylistic-sets
font_features FiraCodeNerdFontComplete-Retina +zero +ss06

# disable ligatures when the cursor is over them so they are easier to edit
disable_ligatures cursor

# Cursor customization {{{
cursor           none

# The cursor shape can be one of (block, beam, underline)
# cursor_shape     block

# Stop blinking cursor after the specified number of seconds of keyboard inactivity. Set to
# zero to never stop blinking.
cursor_stop_blinking_after 10.0
# }}}
#
pointer_shape_when_dragging hand

# Scrollback {{{
# Number of lines of history to keep in memory for scrolling back
scrollback_lines 10000

# Program with which to view scrollback in a new window. The scrollback buffer is passed as
# STDIN to this program. If you change it, make sure the program you use can
# handle ANSI escape sequences for colors and text formatting.
# scrollback_pager less +G -R

# Wheel scroll multiplier (modify the amount scrolled by the mouse wheel). Use negative
# numbers to change scroll direction.
# wheel_scroll_multiplier 5.0
# }}}

# Mouse {{{
# url_style can be one of: none, single, double, curly
# url_color #0087BD
# url_style curly

# The modifier keys to press when clicking with the mouse on URLs to open the URL
# open_url_modifiers kitty_mod

# The program with which to open URLs that are clicked on. The special value "default" means to
# use the operating system's default URL handler.
# open_url_with default

copy_on_select yes

# The modifiers to use rectangular selection (i.e. to select text in a
# rectangular block with the mouse)
# rectangle_select_modifiers ctrl+alt

# Hide mouse cursor after the specified number of seconds of the mouse not being used. Set to
# zero to disable mouse cursor hiding.
mouse_hide_wait 15

# Set the active window to the window under the mouse when moving the mouse around
focus_follows_mouse yes
# }}}

# Audio/visual bell {{{
# Visual bell duration. Flash the screen when a bell occurs for the specified number of
# seconds. Set to zero to disable.
# visual_bell_duration 0.0

# Enable/disable the audio bell. Useful in environments that require silence.
enable_audio_bell no

# Request window attention on bell.
# Makes the dock icon bounce on macOS or the taskbar flash on linux.
window_alert_on_bell yes

# Window layout {{{
remember_window_size   yes
# The special value * means all layouts. The first listed layout will be used as the startup layout.
enabled_layouts tall:bias=55;full_size=1,stack,fat,horizontal

window_border_width 1.0
window_margin_width 0.0
window_padding_width 0

# This leads to excess padding on the right but there is no way around that
# short of choosing a different font size that is an exact multiple of the
# cell size
placement_strategy top-left

# Fade the text in inactive windows by the specified amount (a number between
# zero and one, with 0 being fully faded).
inactive_text_alpha 0.8
# }}}

# Tab bar {{{
tab_bar_style fade
# Which edge to show the tab bar on, top or bottom
tab_bar_edge bottom

# Tab bar colors and styles
# active_tab_foreground #000
# active_tab_background #eee
active_tab_font_style bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
# inactive_tab_font_style normal
# }}}

# Advanced {{{

# The shell program to execute. The default value of . means
# to use whatever shell is set as the default shell for the current user.
# Note that on macOS if you change this, you might need to add --login to
# ensure that the shell starts in interactive mode and reads its startup rc files.
shell .

# Allow other programs to control kitty. If you turn this on other programs can
# control all aspects of kitty, including sending text to kitty windows,
# opening new windows, closing windows, reading the content of windows, etc.
# Note that this even works over ssh connections.
allow_remote_control yes
listen_on unix:/tmp/mykitty

# }}}

# Startup Session
# NOTE: nvim must be started inside this file using zsh -c 'nvim'
startup_session ~/Dropbox/kitty/startup.conf

# Keyboard shortcuts {{{
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html

# The value of kitty_mod is used as the modifier for all default shortcuts, you
# can change it in your kitty.conf to change the modifiers for all the default
# shortcuts. Default is ctrl+shift
# super is command on mac
kitty_mod super+shift
#
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.
#
# You can combine multiple actions to be triggered by a single shortcut, using the
# syntax below:
# map key combine <separator> action1 <separator> action2 <separator> action3 ...
# For example:
# map kitty_mod+e combine : new_window : next_layout
# this will create a new window and switch to the next available layout
#
# You can use multi-key shortcuts using the syntax shown below:
# map key1>key2>key3 action
# For example:
# map ctrl+f>2 set_font_size 20
# this will change the font size to 20 points when you press ctrl+f and then 2

# Clipboard {{{
# map kitty_mod+v        paste_from_clipboard
# map kitty_mod+s        paste_from_selection
# map kitty_mod+c        copy_to_clipboard
# map shift+insert        paste_from_selection
# You can also pass the contents of the current selection to any program using
# pass_selection_to_program. By default, the system's open program is used, but
# you can specify your own, for example:
# map kitty_mod+o      pass_selection_to_program firefox
# map kitty_mod+o        pass_selection_to_program
# }}}

# Scrolling {{{
# map kitty_mod+up        scroll_line_up
# map kitty_mod+down      scroll_line_down
# map kitty_mod+k         scroll_line_up
# map kitty_mod+j         scroll_line_down
# map kitty_mod+page_up   scroll_page_up
# map kitty_mod+page_down scroll_page_down
# map kitty_mod+home      scroll_home
# map kitty_mod+end       scroll_end
# map kitty_mod+h         show_scrollback
# }}}

# Window management {{{
# The script is a kitty taken from https://sw.kovidgoyal.net/kitty/kittens/custom.html
map kitty_mod+space      toggle_layout stack
map kitty_mod+enter      new_window
map kitty_mod+q          close_window
# map kitty_mod+n>n    new_os_window
# map kitty_mod+]        next_window
# map kitty_mod+[        previous_window
# map kitty_mod+f        move_window_forward
# map kitty_mod+b        move_window_backward
# map kitty_mod+`        move_window_to_top
# map kitty_mod+1        first_window
# map kitty_mod+2        second_window
# map kitty_mod+3        third_window
# map kitty_mod+4        fourth_window
# map kitty_mod+5        fifth_window
# map kitty_mod+6        sixth_window
# map kitty_mod+7        seventh_window
# map kitty_mod+8        eighth_window
# map kitty_mod+9        ninth_window
# map kitty_mod+0        tenth_window
# You can open a new window running an arbitrary program, for example:
# map kitty_mod+y      new_window mutt
#
# You can pass the current selection to the new program by using the @selection placeholder
# map kitty_mod+y      new_window less @selection
#
# You can even send the contents of the current screen + history buffer as stdin using
# the placeholders @text (which is the plain text) and @ansi (which includes text styling escape codes).
# For only the current screen, use @screen or @ansi_screen.
# For example, the following command opens the scrollback buffer in less in a new window.
# map kitty_mod+y      new_window @ansi less +G -R
#
# You can open a new window with the current working directory set to the
# working directory of the current window using
# map ctrl+alt+enter    new_window_with_cwd
# }}}

map kitty_mod+w        quit
# Tab management {{{
map kitty_mod+n        next_tab
map kitty_mod+v        new_tab nvim
map kitty_mod+p        previous_tab
map kitty_mod+c        new_tab
map kitty_mod+x        close_tab
map kitty_mod+.        next_layout
map kitty_mod+alt+t    set_tab_title
# map kitty_mod+.        move_tab_forward
# map kitty_mod+,        move_tab_backward

# You can also create shortcuts to go to specific tabs, with 1 being the first tab
# map ctrl+alt+1          goto_tab 1
# map ctrl+alt+2          goto_tab 2

# Just as with new_window above, you can also pass the name of arbitrary
# commands to run when using new_tab and use new_tab_with_cwd.
map ctrl+j kitten pass_keys.py neighboring_window bottom ctrl+j
map ctrl+k kitten pass_keys.py neighboring_window top    ctrl+k
map ctrl+h kitten pass_keys.py neighboring_window left   ctrl+h
map ctrl+l kitten pass_keys.py neighboring_window right  ctrl+l
# }}}

# Layout management {{{
# You can create shortcuts to switch to specific layouts
# map kitty_mod+r>t          goto_layout tall
# map kitty_mod+r>f          goto_layout fat
# map kitty_mod+r>s          goto_layout stack
# }}}

# Font sizes {{{
map kitty_mod+equal    increase_font_size
map kitty_mod+minus    decrease_font_size
# map kitty_mod+backspace restore_font_size
# To setup shortcuts for specific font sizes, follow the example below:
# map kitty_mod+f6     set_font_size 10.0
# map kitty_mod+f7     set_font_size 20.5
# }}}

# Select and act on visible text {{{
# Use the hints kitten to select text and either pass it to an external program or
# insert it into the terminal or copy it to the clipboard.
#
# Open a currently visible URL using the keyboard. The program used to open the
# URL is specified in open_url_with.
map kitty_mod+e         run_kitten text hints

# Open a currently visible file name in nvim at a specific line
map kitty_mod+g kitten hints --type=linenum --linenum-action=tab nvim +{line} +{path}
# Select a path/filename and insert it into the terminal. Useful, for instance to
# run git commands on a filename output from a previous git command.
# map kitty_mod+p>f       run_kitten text hints --type path --program -

# Select a path/filename and open it with the default open program.
# map kitty_mod+p>shift+f run_kitten text hints --type path

# Select a line of text and insert it into the terminal. Use for the
# output of things like: ls -1
# map kitty_mod+p>l       run_kitten text hints --type line --program -

# Select words and insert into terminal.
# map kitty_mod+p>w       run_kitten text hints --type word --program -

# The hints kitten has many more modes of operation that you can map to different
# shortcuts. For a full description run: kitty +kitten hints --help
# }}}

# Miscellaneous {{{
map kitty_mod+\          toggle_fullscreen
# map kitty_mod+u        input_unicode_character
map kitty_mod+e>c        edit_config_file
# Open the kitty shell in a new window/tab/overlay/os_window to control kitty using commands.
map kitty_mod+a         kitty_shell window

confirm_os_window_close 2

# OS specific tweaks {{{
draw_minimal_borders yes

hide_window_decorations yes

# Change the color of the kitty window's titlebar on macOS. A value of "system"
# means to use the default system color, a value of "background" means to use
# the background color of the currently active window and finally you can use
# an arbitrary color, such as #12af59 or "red". WARNING: This option works by
# using a hack, as there is no proper Cocoa API for it. It sets the background
# color of the entire window and makes the titlebar transparent. As such it is
# incompatible with background_opacity. If you want to use both, you are
# probably better off just hiding the titlebar with macos_hide_titlebar.
# Match one dark vim title bar background color
# macos_titlebar_color #1C1E24
macos_quit_when_last_window_closed yes
macos_thicken_font 0.3
# Use the option key as an alt key. With this set to no, kitty will use
# the macOS native Option+Key = unicode character behavior. This will
# break any Alt+key keyboard shortcuts in your terminal programs, but you
# can use the macOS unicode input technique.
# macos_option_as_alt yes

# Hide the kitty window from running tasks (alt-tab) on macOS.
# macos_hide_from_tasks no
# }}}
#
# You can include secondary config files via the "include" directive.
# If you use a relative path for include, it is resolved with respect to the
# location of the current config file. For example:
include ${HOME}/${USER}.conf

# Color scheme {{{
# Doom Vibrant
include current-theme.conf